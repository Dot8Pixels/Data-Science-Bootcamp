If not, it’s decided by a harmonic and intransitive method,
rock crushes scissors, scissors cuts paper, but paper covers rock.")
cat("\n---------------------------------------------------------------------------------------------------------------")
game_start <- toupper(readline("\nDo you want to play the RPS game? (Y/N): "))
if(game_start == "Y"){
cat("Game Start!")
rps_play()
} else {
print("Exit")
}
1
if(game_start == "Y"){
cat("Game Start!")
rps_play()
} else {
print("Exit")
}
source("C:/Users/gunsr/Desktop/Programming/Data Science Bootcamp by DATAROCKIE/Sprint 4 - Programming Foundation/R On Demand Code/R Foundation Workshop 3 Hrs/Homework_Pao_Ying_Chub2.R")
rps_run()
rps_play()
rps_play()
weapons <- dict("1"="Rock", "2"="Paper", "3"="Scissors", "4"="Run!")
rps_play <- function(){
#user_weapon <- as.numeric(readline("Please choose your weapon (Rock=1, Paper:2, Scissors:3, Run!:4): "))
user_weapon <- readline("Please choose your weapon (Rock=1, Paper:2, Scissors:3, Run!:4): ")
cat(weapons[user_weapon])
if(user_weapon %in% c("1", "2", "3", "4")){
cat(weapons[user_weapon])
} else {
rps_play()
}
}
cat("Hello Ladies & Gentlemen, welcome to Rock–Paper–Scissors Game \n")
cat("---------------------------------------------------------------------------------------------------------------")
cat("\nPlease read the rule before coming to the game!\n
On the count of three (usually accompanied by a chant of “Rock, Paper, Scissors”),
each time choosing one hand and bringing it down on the count, the opponent “throw” their selection.
Rock = 1, Scissors = 2, and Paper = 3.
If players throw out the same gesture with the opponent, the game goes on.
If not, it’s decided by a harmonic and intransitive method,
rock crushes scissors, scissors cuts paper, but paper covers rock.")
cat("\n---------------------------------------------------------------------------------------------------------------")
game_start <- toupper(readline("\nDo you want to play the RPS game? (Y/N): "))
#cat("Game Start!")
rps_play()
print("Exit")
}
rps_play()
rps_play()
rps_play()
rps_play()
rps_play()
rps_play()
rps_play <- function(){
#user_weapon <- as.numeric(readline("Please choose your weapon (Rock=1, Paper:2, Scissors:3, Run!:4): "))
user_weapon <- readline("Please choose your weapon (Rock=1, Paper:2, Scissors:3, Run!:4): ")
cat(user_weapon)
if(user_weapon %in% c("1", "2", "3", "4")){
cat(weapons[user_weapon])
} else {
rps_play()
}
}
rps_play()
rps_play <- function(){
#user_weapon <- as.numeric(readline("Please choose your weapon (Rock=1, Paper:2, Scissors:3, Run!:4): "))
user_weapon <- readline("Please choose your weapon (Rock=1, Paper:2, Scissors:3, Run!:4): ")
cat(user_weapon)
#if(user_weapon %in% c("1", "2", "3", "4")){
#  cat(weapons[user_weapon])
#} else {
#  rps_play()
#}
}
rps_play()
rps_play <- function(){
#user_weapon <- as.numeric(readline("Please choose your weapon (Rock=1, Paper:2, Scissors:3, Run!:4): "))
user_weapon <- readline("Please choose your weapon (Rock=1, Paper:2, Scissors:3, Run!:4): ")
cat(user_weapon)
print(class(user_weapon))
#if(user_weapon %in% c("1", "2", "3", "4")){
#  cat(weapons[user_weapon])
#} else {
#  rps_play()
#}
}
rps_play()
weapons[1]
weapons["1"]
weapons
weapons <- dict("1"="Rock", "2"="Paper", "3"="Scissors", "4"="Run!")
install.packages("Dict")
library(Dict)
rps_play()
weapons[1]
weapons
weapons <- dict("1"="Rock", "2"="Paper", "3"="Scissors", "4"="Run!")
weapons
weapons[1]
rps_play <- function(){
#user_weapon <- as.numeric(readline("Please choose your weapon (Rock=1, Paper:2, Scissors:3, Run!:4): "))
user_weapon <- readline("Please choose your weapon (Rock=1, Paper:2, Scissors:3, Run!:4): ")
cat(user_weapon)
print(class(user_weapon))
cat(weapons[user_weapon])
#if(user_weapon %in% c("1", "2", "3", "4")){
#  cat(weapons[user_weapon])
#} else {
#  rps_play()
#}
}
rps_play()
source("C:/Users/gunsr/Desktop/Programming/Data Science Bootcamp by DATAROCKIE/Sprint 4 - Programming Foundation/R On Demand Code/R Foundation Workshop 3 Hrs/Homework_Pao_Ying_Chub2.R")
game_start <- toupper(readline("\nDo you want to play the RPS game? (Y/N): "))
if(game_start == "Y"){
#cat("Game Start!")
rps_play()
} else {
print("Exit")
}
source("C:/Users/gunsr/Desktop/Programming/Data Science Bootcamp by DATAROCKIE/Sprint 4 - Programming Foundation/R On Demand Code/R Foundation Workshop 3 Hrs/Homework_Pao_Ying_Chub2.R")
rps_play <- function(){
#user_weapon <- as.numeric(readline("Please choose your weapon (Rock=1, Paper:2, Scissors:3, Run!:4): "))
user_weapon <- readline("Please choose your weapon (Rock=1, Paper:2, Scissors:3, Run!:4): ")
cat(weapons[user_weapon])
if(user_weapon %in% c("1", "2", "3", "4")){
#cat(weapons[user_weapon])
versus(user_weapon)
} else {
rps_play()
}
}
rps_play()
versus <- function(weapon){
cat(weapons[weapon])
}
rps_play()
library(tidyverse)
library(dplyr)
iris_df <- as_tibble(iris)
Species <- iris_df$Species
iris_df <- iris_df %>%
select(-Species)
ggplot(iris_df, aes(Sepal.Length, Sepal.Width)) +
geom_point()
ggplot(iris_df, aes(Pepal.Length, Pepal.Width)) +
geom_point()
ggplot(iris_df, aes(Sepal.Length, Sepal.Width)) +
geom_point()
ggplot(iris_df, aes(Pepal.Length, Pepal.Width)) +
geom_point()
ggplot(iris_df, aes(Sepal.Length, Sepal.Width)) +
geom_point()
ggplot(iris_df, aes(Petal.Length, Petal.Width)) +
geom_point()
km_model <- kmeans(iris_df, centers = 2)
km_model$size
km_model$size
km_model$cluster
set.seed(42)
km_model <- kmeans(iris_df, centers = 3)
km_model$size
km_model$cluster
table(Species, Clusters)
Clusters <- km_model$cluster
table(Species, Clusters)
ggplot(iris_df, aes(Petal.Length, Petal.Width,
col=Species)) +
geom_point(size = 5) +
theme_minimal()
km_models <- list()
for (k in 1:5) {
model <- kmeans(iris[, 1:4], centers = k)
km_models[[k]] <- model
}
summary(km_models)
cls
setwd("C:/Users/gunsr/Desktop/Programming/Data Science Bootcamp - DATAROCKIE/Sprint 8 - ML for Data Analyst/Live")
​install.packages(c("tidyverse", "caret", "rpart", "rpart.plot", "e1071"))
install.packages(c("tidyverse", "caret", "rpart", "rpart.plot", "e1071"))
install.packages(c("tidyverse", "caret", "rpart", "rpart.plot", "e1071"))
library(tidyverse)
library(caret)
library(mlbench)
library(mlbench)
install.packages("mlbench")
library(tidyverse)
library(caret)
library(mlbench)
data("BostonHousing")
View("BostonHousing")
View(BostonHousing)
View(BostonHousing)
n <- nrow(BostonHousing)
n <- nrow(BostonHousing)
sample(1:n, size = 0.8*n)
sample(1:n, size = 0.8*n)
set.seed(29)
n <- nrow(BostonHousing)
sample(1:n, size = 0.8*n)
sample(1:n, size = 0.8*n)
sample(1:n, size = 0.8*n)
set.seed(29)
n <- nrow(BostonHousing)
sample(1:n, size = 0.8*n)[1:10]
set.seed(29)
n <- nrow(BostonHousing)
sample(1:n, size = 0.8*n)[1:10]
set.seed(29)
n <- nrow(BostonHousing)
sample(1:n, size = 0.8*n)[1:10]
train_df <- BostonHousing[id, ] # 80%
test_df <- BostonHousing[-id, ] # 20%
id <- sample(1:n, size = 0.8*n)[1:10]
train_df <- BostonHousing[id, ] # 80%
test_df <- BostonHousing[-id, ] # 20%
set.seed(29)
n <- nrow(BostonHousing)
id <- sample(1:n, size = 0.8*n)
train_df <- BostonHousing[id, ] # 80%
test_df <- BostonHousing[-id, ] # 20%
nrow(train_df); nrow(test_df)
train(medv ~ crim + rm + tax + age,
data = train_df,
method = "lm")
set.seed(29)
train(medv ~ crim + rm + tax + age,
data = train_df,
method = "lm")
set.seed(29)
train(medv ~ crim + rm + tax + age,
data = train_df,
method = "lm")
set.seed(29)
train(medv ~ crim + rm + tax + age,
data = train_df,
method = "lm")
set.seed(42)
n <- nrow(BostonHousing)
id <- sample(1:n, size = 0.8*n)
train_df <- BostonHousing[id, ] # 80%
test_df <- BostonHousing[-id, ] # 20%
set.seed(42)
train(medv ~ crim + rm + tax + age,
data = train_df,
method = "lm")
lm_model <- train(medv ~ crim + rm + tax + age,
data = train_df,
method = "lm")
lm_model
set.seed(42)
knn_model <- train(medv ~ crim + rm + tax + age,
data = train_df,
method = "knn")
knn_model
set.seed(42)
lm_model <- train(medv ~ crim + rm + tax + age,
data = train_df,
method = "lm")
set.seed(42)
knn_model <- train(medv ~ crim + rm + tax + age,
data = train_df,
method = "knn")
lm_model
knn_model
glimpse(train_df)
set.seed(42)
lm_model <- train(medv ~ .,
data = train_df,
method = "lm")
lm_model
p_medv <- predict(lm_model, newdata = test_df)
p_medv
p_medv[1:20]
test_rmse <- sqrt(mean((test_df$medv - p_medv)**2))
test_rmse
lm_model
saveRDS(lm_model, "LM_Model.RDS")
my_model <- readRDS("LM_Model.RDS")
my_model$finalModel
library(tidyverse)
library(caret)
library(rpart)
library(rpart.plot)
iris
iris %>% count(Species)
mean(complete.cases(iris))
set.seed(42)
n <- nrow(iris)
id <- sample(n, n*0.8)
train_df <- iris[id, ]
test_df <- iros[-id, ]
set.seed(42)
n <- nrow(iris)
id <- sample(n, n*0.8)
train_df <- iris[id, ]
test_df <- iris[-id, ]
nrow(train_df);nrow(test_df)
set.seed(42)
train(
Species ~ .,
data = train_df,
method = "rpart"
)
set.seed(42)
rpart_model <- train(
Species ~ .,
data = train_df,
method = "rpart"
)
p <- predict(rpart_model, newdata = test_df)
mean(p == test_df$Species)
ctrl <- trainControl(method = "boot",
number = 50)
set.seed(42)
rpart_model <- train(
Species ~ .,
data = train_df,
method = "rpart"
)
p <- predict(rpart_model, newdata = test_df)
mean(p == test_df$Species)
ctrl <- trainControl(method = "boot",
number = 50
)
ctrl <- trainControl(method = "boot",
number = 50)
ctrl <- trainControl(method = "boot",
ctrl <- trainControl(method = "boot",
ctrl <- trainControl(method = "boot",
ctrl <- trainControl(method = "boot",
number = 50)
set.seed(42)
rpart_model <- train(
Species ~ .,
data = train_df,
method = "rpart",
trControl = ctrl
)
p <- predict(rpart_model, newdata = test_df)
mean(p == test_df$Species)
rpart_model <- train(
Species ~ .,
data = train_df,
method = "rpart",
trControl = ctrl
)
p <- predict(rpart_model, newdata = test_df)
mean(p == test_df$Species)
ctrl <- trainControl(method = "cv",
number = 5,
verboseIter = TRUE)
set.seed(42)
rpart_model <- train(
Species ~ .,
data = train_df,
method = "rpart",
trControl = ctrl
)
p <- predict(rpart_model, newdata = test_df)
mean(p == test_df$Species)
rpart_model
set.seed(42)
rpart_model <- train(Species ~ .,
data = train_df,
method = "rpart",
trControl = ctrl
)
set.seed(42)
knn_model <- train(Species ~ .,
data = train_df,
method = "knn",
trControl = ctrl
)
knn_model
p_rp <- predict(rpart_model,
newdata = test_df)
p_knn <- predict(knn_model,
newdata = test_df)
mean(p_rp == test_df$Species)
mean(p_knn == test_df$Species)
knn_model <- train(Species ~ .,
data = train_df,
method = "knn",
metric = "Accuracy",
trControl = ctrl
)
p_knn <- predict(knn_model,
newdata = test_df)
# mean(p_rp == test_df$Species)
mean(p_knn == test_df$Species)
knn_model
library(tidyverse)
library(caret)
library(rpart)
churn <- read_csv("churn.csv")
mean(complete.cases(churn)) == 1
glimpse(churn)
churn %>%
mutate_if(is.character, as.factor())
churn <- churn %>%
mutate_if(is.character, as.factor)
churn
glimpse(churn)
churn %>%
count(churn)
churn %>%
count(churn) %>%
mutate(pct = n/sum(n))
train_df <- churn[id, ]
test_df <- churn[-id, ]
nrow(train_df)
nrow(test_df)
set.seed(42)
n <- nrow(churn)
id <- createDataPartition(y = churn$churn,
p = .8,
list = FALSE)
train_df <- churn[id, ]
test_df <- churn[-id, ]
glm_model <- glm(churn ~ .,
data = train_df,
family = "binomial")
predict(glm_model, newdata = test_df,
type = "response")
set.seed(42)
ctrl <- trainControl(method = "cv",
number = 5,
verboseIter = TRUE)
glm_model <- train(churn ~ .,
data = train_df,
method = "glm",
trControl = ctrl)
glm_model
ctrl <- trainControl(method = "repeatedcv",
number = 5,
repeats = 5,
verboseIter = TRUE)
glm_model <- train(churn ~ .,
data = train_df,
method = "glm",
trControl = ctrl)
glm_model
set.seed(42)
ctrl <- trainControl(method = "cv",
number = 5,
verboseIter = TRUE)
glm_model <- train(churn ~ .,
data = train_df,
method = "glm",
trControl = ctrl)
rpart_model <- train(churn ~ .,
data = train_df,
method = "rpart",
trControl = ctrl)
rpart_model
p <- predict(rpart_model, newdata = test_df)
p
mean(p == test_df$churn)
table(test_df$churn, p, dnn=c("actual", "prediction"))
table(test_df$churn, p,
dnn=c("actual", "prediction"))
confusionMatrix(test_df$churn,
p)
confusionMatrix(p,
test_df$churn)
confusionMatrix(p,
test_df$churn,
mode = "prec_recall")
confusionMatrix(p,
test_df$churn,
mode = "prec_recall",
positive = "Yes")
rf_model <- train(churn ~ .,
data = train_df,
method = "rf",
trControl = ctrl)
rf_model
p <- predict(rf_model, newdata = test_df)
mean(p == test_df$churn)
confusionMatrix(p,
test_df$churn,
mode = "prec_recall",
positive = "Yes")
saveRDS(rf_model, "randomForest.RSD")
myModel <- readRDS("randomForest.RDS")
saveRDS(rf_model, "randomForest.RDS")
myModel <- readRDS("randomForest.RDS")
ctrl <- trainControl(method = "cv",
number = 5,
classProbs = TRUE,
summaryFunction = twoClassSummary(),
verboseIter = TRUE)
ctrl <- trainControl(method = "cv",
number = 5,
classProbs = TRUE,
summaryFunction = twoClassSummary,
verboseIter = TRUE)
rf_model <- train(churn ~ .,
data = train_df,
method = "rf",
metric = "ROC",
trControl = ctrl)
p <- predict(rf_model, newdata = test_df)
mean(p == test_df$churn)
confusionMatrix(p,
test_df$churn,
mode = "prec_recall",
positive = "Yes")
saveRDS(rf_model, "randomForest.RDS")
myModel <- readRDS("randomForest.RDS")
rf_model
