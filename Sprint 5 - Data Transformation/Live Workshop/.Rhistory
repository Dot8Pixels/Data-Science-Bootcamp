#user_weapon <- as.numeric(readline("Please choose your weapon (Rock=1, Paper:2, Scissors:3, Run!:4): "))
user_weapon <- readline("Please choose your weapon (Rock=1, Paper:2, Scissors:3, Run!:4): ")
cat(weapons[user_weapon])
if(user_weapon %in% c("1", "2", "3", "4")){
#cat(weapons[user_weapon])
versus(user_weapon)
} else {
rps_play()
}
}
rps_play()
versus <- function(weapon){
cat(weapons[weapon])
}
rps_play()
setwd("C:/Users/gunsr/Desktop/Programming/Data Science Bootcamp by DATAROCKIE/Sprint 5 - Data Transformation/Live Workshop")
install.package("tidyverse")
install.packages("tidyverse")
reticulate::repl_python()
print("hello world")
shopping_ls = ["Car", "Guitar", "BTC", "Game", "House"]
quit
library(tidyverse)
library(readxl)
get(wd)
student1 <- read_csv("data\student1.csv")
student1 <- read_csv("data\student1.csv")
student1 <- read_csv("data/student1.csv")
student1 <- read_csv("data/student1.csv")
read_delim("data/student2.txt", delim = ";")
studnet3 <- read_delim("data/student2.txt", delim = "\t")
studnet3 <- read_delim("data/student3.txt", delim = "\t")
studnet3 <- read_delim("data/student3.txt", delim = "\t")
student1 <- read_csv("data/student1.csv")
student1 <- read_csv("data/student1.csv")
studnet2 <- read_delim("data/student2.txt", delim = ";")
studnet3 <- read_delim("data/student3.txt", delim = "\t")
student3
student1 <- read_csv("data/student1.csv")
student2 <- read_delim("data/student2.txt", delim = ";")
student3 <- read_delim("data/student3.txt", delim = "\t")
student3
studnet4 <- read_excel("data/studnet4.xlsx", "Sheet1")
studnet4 <- read_excel("data/student4.xlsx", "Sheet1")
student4
student4 <- read_excel("data/student4.xlsx", "Sheet1")
student4
student4 <- read_excel("data/student4.xlsx", "Sheet1")
student5 <- read_excel("data/student4.xlsx", 2)
student5
student6 <- read_excel("data/student4.xlsx", 3, skip = 3)
student6
ls_student <- list(
student1,
student2,
student3,
student4,
student5,
student6,
)
source("C:/Users/gunsr/Desktop/Programming/Data Science Bootcamp by DATAROCKIE/Sprint 5 - Data Transformation/Live Workshop/Data Transformation with R (15 Jan 2022).R", echo=TRUE)
student1 <- read_csv("data/student1.csv")
student2 <- read_delim("data/student2.txt", delim = ";")
student3 <- read_delim("data/student3.txt", delim = "\t")
student4 <- read_excel("data/student4.xlsx", "Sheet1")
student5 <- read_excel("data/student4.xlsx", 2)
student6 <- read_excel("data/student4.xlsx", 3, skip = 3)
ls_student <- list(
student1,
student2,
student3,
student4,
student5,
student6,
)
ls_student <- list(
student1,
student2,
student3,
student4,
student5,
student6
)
ls_student
all_students <- bind_rows(ls_student)
all_students
write_csv(all_students, "data/all_students.csv")
library(jsonlite)
employees <- data.frame(fromJSON("data/employees.json"))
employees
glimpse(employees)
employees$ID <- as.numeric(employees$ID)
employees$Salary <- as.numeric(employees$Salary)
glimpse(employees)
library(lubridate)
x <- "2022-01-15"
class(x)
ymd(x)
employees
employees$StartDate <- mdy(employees$StartDate)
employees
year(employess$StartDate)
year(employees$StartDate)
month(employees$StartDate)
month(employees$StartDate, label=T)
day(employees$StartDate, label=T)
3day(employees$StartDate, label=T)
wday(employees$StartDate, label=T)
employees$year <- year(employees$StartDate)
employees$month <- month(employees$StartDate, label=T)
employees
glimpse(employees)
uni <- data.frame(fromJSON("data/university.json"))
uni
library(rvest)
html <- read_html("data/school_website.html")
html
mtcars %>% head()
html %>% html_node("title")
html %>% html_node("title") %>% html_text()
html %>% html_node("title") %>% html_text()
html <- read_html("data/school_website.html")
html %>% html_node("title") %>% html_text()
html %>% html_node("h2") %>% html_text()
html %>% html_nodes("h2") %>% html_text()
html %>% html_nodes("ul") %>% html_text()
html %>% html_nodes("li") %>% html_text()
a <- html %>% html_nodes("h2") %>% html_text()
a[2]
rm[a]
rm(a)
html %>% html_nodes("ul li") %>% html_text()
html %>% html_nodes("ol li") %>% html_text()
teachers <- html %>% html_nodes("ul li") %>% html_text()
companies <- html %>% html_nodes("ol li") %>% html_text()
df <- data.frame(teachers, companies)
df
library(xml2)
xml_doc <- read_xml("https://gist.githubusercontent.com/toyeiei/7495caf051daec2d45d70cb2c3daa251/raw/aaccdae3a6f2c34e9b2c326bdb9b578565c06d37/test_email.xml")
xml_doc %>% html_nodes("from") %>% html_text()
xml_doc %>% html_nodes("subject") %>% html_text()
xml_doc %>% html_nodes("from") %>% html_text()
xml_doc %>% html_nodes("content") %>% html_text()
xml_doc %>% html_nodes("From") %>% html_text()
xml_doc %>% html_nodes("from") %>% html_text()
imdb <- read_html(url)
url <- "https://www.imdb.com/chart/top/"
imdb <- read_html(url)
imdb
imdb %>% html_node("td") %>% html_text()
imdb %>% html_node("td.titleColum") %>% html_text()
imdb %>% html_node("td.titleColumn") %>% html_text()
imdb %>% html_nodes("td.titleColumn") %>% html_text()
imdb %>% html_nodes("td.titleColumn") %>% html_text() %>% str_remove_all("\n")
imdb %>% html_nodes("td.titleColumn") %>% html_text() %>% str_remove_all("\n") %>% head()
imdb %>% html_nodes("td.titleColumn") %>% html_text()
imdb %>% html_nodes("td.titleColumn") %>% html_text() %>% str_remove_all("\n") %>% str_trim()%>% head()
imdb %>% html_nodes("td.titleColumn") %>% html_text() %>% str_remove_all("\n") %>% str_trim() %>% str_replace_all("\\s+") %>% head()
imdb %>% html_nodes("td.titleColumn") %>% html_text() %>% str_remove_all("\n") %>% str_trim() %>% str_replace_all("\\s+", " ") %>% head()
mtcars
class(mtcars)
mtcars %>% as_tibble()
mtcars %>% rownames_to_column() %>% head()
mtcars <- mtcars %>% rownames_to_column() %>% head()
mtcars
mtcars <- mtcars %>% as_tibble()
mtcars %>% select(mpg, hp, wt)
mtcars
mtcars %>% as_tibble()
mtcars
mtcars
class(mtcars)
mtcars %>% as_tibble()
mtcars <- mtcars %>% rownames_to_column()
mtcars <- mtcars %>% as_tibble()
mtcars
class(mtcars)
mtcars %>% as_tibble()
mtcars <- mtcars %>% rownames_to_column()
mtcars
rm(mtcars)
mtcars
mtcars2 <- mtcars %>% as_tibble()
df <- mtcars2 %>% select(milePerGallon = mpg,
horsePower = hp,
weight = wt)
mtcasr2 %>% select(model = rowname, mpg, hp, wt) %>%
filter(mpg > 30, hp < 100)
mtcars2 %>% select(model = rowname, mpg, hp, wt) %>%
filter(mpg > 30, hp < 100)
df <- mtcars2 %>% select(milePerGallon = mpg,
horsePower = hp,
weight = wt)
df
mtcars
mtcars2 <- mtcars %>% as_tibble()
mtcars2
mtcars2 <- rownames_to_column()
df <- mtcars2 %>% select(milePerGallon = mpg,
horsePower = hp,
weight = wt)
mtcars2 %>% select(model = rowname, mpg, hp, wt) %>%
filter(mpg > 30, hp < 100)
mtcars2 <- mtcars %>% as_tibble()
mtcars2
mtcars2 <- rownames_to_column()
mtcars2 <- mtcars %>%  rownames_to_column()
df <- mtcars2 %>% select(milePerGallon = mpg,
horsePower = hp,
weight = wt)
mtcars2 %>% select(model = rowname, mpg, hp, wt) %>%
filter(mpg > 30, hp < 100)
mtcars2 %>% select(model = rowname, mpg, hp, wt) %>%
filter(hp != 65)
mtcars2 %>% select(model = rowname, mpg, hp, wt) %>%
filter(str_detect(model, "^M"))
mtcars2 %>% select(model = rowname, mpg, hp, wt) %>%
filter(str_detect(model, "[MT]"))
mtcars2 %>% select(model = rowname, mpg, hp, wt) %>%
filter(str_detect(model, "^[MT]"))
mtcars2 %>% select(model = rowname, mpg, hp, wt) %>%
filter(str_detect(model, "^[MT]"))
state.name
state.name()
state.name
str_detect(state.name, "^M")
str_detect(state.name, "^M", negate = TRUE)
!str_detect(state.name, "^M")
state.name[str_detect(state.name, "^S")]
state.name[str_detect(state.name, "\\S")]
state.name[str_detect(state.name, "\\s")]
state.name[str_detect(state.name, "\\s", negate = T]
state.name[str_detect(state.name, "\\s", negate = T)]
mtcars2 %>% select(model = rowname, mpg, hp, wt) %>%
filter(str_detect(model, "^[MT]")) %>%
arrange(mpg)
mtcars2 %>% select(model = rowname, mpg, hp, wt) %>%
filter(str_detect(model, "^[MT]")) %>%
arrange(desc(mpg))
mtcars2 %>% select(model = rowname, mpg, hp, wt) %>%
filter(str_detect(model, "^[MT]")) %>%
arrange(model, -mpg)
mtcars2 %>% select(model = rowname, mpg, hp, wt) %>%
filter(str_detect(model, "^[MT]")) %>%
arrange(model, desc(mpg))
mtcars2 %>% select(model = rowname, mpg, hp, wt) %>%
filter(str_detect(model, "^[MT]")) %>%
arrange(model, desc(mpg))
mtcars2 %>% select(model = rowname, mpg, hp, wt) %>%
filter(str_detect(model, "^[MT]")) %>%
mutate(hp_double = hp*2)
mtcars2 %>% select(model = rowname, mpg, hp, wt) %>%
filter(str_detect(model, "^[MT]")) %>%
mutate(hp_double = hp*2,
hp_log = log(hp),
wt_ext = exp(wt))
str_sub(state,name, 1)
str_sub(state,name, 1, 2)
str_sub(state,name, 1, 2)
state.name
str_sub(state.name,1,2)
mtcars2 %>% select(model = rowname, mpg, hp, wt) %>%
filter(str_detect(model, "^[MT]")) %>%
mutate(segment = str_sub(model, 1, 1))
mtcars2 %>% select(model = rowname, mpg, hp, wt) %>%
filter(str_detect(model, "^[MT]")) %>%
mutate(segment = str_sub(model, 1, 1)) %>%
arrange(segment, -mpg)
mtcars2 %>% select(model = rowname, mpg, hp, wt) %>%
filter(str_detect(model, "^[MT]")) %>%
mutate(segment = str_sub(model, 1, 1)) %>%
arrange(segment, -mpg) %>%
summarise()
mtcars2 %>% select(model = rowname, mpg, hp, wt) %>%
filter(str_detect(model, "^[MT]")) %>%
mutate(segment = str_sub(model, 1, 1)) %>%
arrange(segment, -mpg) %>%
summarise(mean(mpg))
mtcars2 %>% select(model = rowname, mpg, hp, wt) %>%
filter(str_detect(model, "^[MT]")) %>%
mutate(segment = str_sub(model, 1, 1)) %>%
arrange(segment, -mpg) %>%
summarise(avg_mpg = mean(mpg),
sum_mpg = sum(mpg),
median_t = median(wt))
mtcars2 %>% select(model = rowname, mpg, hp, wt) %>%
filter(str_detect(model, "^[MT]")) %>%
mutate(segment = str_sub(model, 1, 1)) %>%
arrange(segment, -mpg) %>%
summarise(avg_mpg = mean(mpg),
sum_mpg = sum(mpg),
median_t = median(wt),
n = n())
mtcars2 %>% select(model = rowname, mpg, hp, wt) %>%
filter(str_detect(model, "^[MT]")) %>%
mutate(segment = str_sub(model, 1, 1)) %>%
group_by(segment) %>%
summarise(avg_mpg = mean(mpg),
sum_mpg = sum(mpg),
median_t = median(wt),
n =)
result <- mtcars2 %>% select(model = rowname, mpg, hp, wt) %>%
filter(str_detect(model, "^[MT]")) %>%
mutate(segment = str_sub(model, 1, 1)) %>%
group_by(segment) %>%
summarise(avg_mpg = mean(mpg),
sum_mpg = sum(mpg),
median_t = median(wt),
n =)
write_csv(result, "data/result.csv")
mtcars[sample(1:32, size=5]
mtcars %>% sample_n(5)
mtcars %>% sample_n(5)
set.seed(1)
mtcars %>% sample_n(5)
mtcars %>% sample_n(5)
mtcars %>% sample_n(5)
mtcars %>% sample_n(5)
set.seed(1)
mtcars %>% sample_n(5)
set.seed(1)
mtcars %>% sample_n(5)
set.seed(1)
mtcars %>% sample_n(5)
help(sample_n)
mtcars %>% sample_frac(0.25)
mtcars %>% sample_n(5)
mtcars %>% sample_frac(0.25)
mtcars %>% count(am)
mtcars %>% mutate(am = ifelse(am == 0, "Auto", "Manual"))
mtcars %>% mutate(am = ifelse(am == 0, "Auto", "Manual"))
ifelse((x<-85) >= 80, "Passed", "Failed")
mtcars %>% mutate(am = as.factor(ifelse(am == 0, "Auto", "Manual")))
mtcars %>% mutate(am = as.factor(ifelse(am == 0, "Auto", "Manual"))) %>%
group_by(am) %>%
mtcars %>% mutate(am = as.factor(ifelse(am == 0, "Auto", "Manual"))) %>%
group_by(am) %>%
mtcars %>% mutate(am = as.factor(ifelse(am == 0, "Auto", "Manual"))) %>%
group_by(am)
mtcars %>% mutate(am = as.factor(ifelse(am == 0, "Auto", "Manual"))) %>%
group_by(am)
mtcars %>% select(-rowname, -hp) %>%
mutate(am = as.factor(ifelse(am == 0, "Auto", "Manual"))) %>%
group_by(am) %>%
mtcars %>% select(-rowname, -hp) %>%
mutate(am = as.factor(ifelse(am == 0, "Auto", "Manual"))) %>%
group_by(am) %>%
summarise_all(mean)
mtcars %>% select(-rowname, -hp) %>%
mutate(am = as.factor(ifelse(am == 0, "Auto", "Manual"))) %>%
group_by(am) %>%
summarise_all(mean)
ifelse((x<-85) >= 80, "Passed", "Failed")
mtcars %>% select(-rowname, -hp) %>%
mutate(am = as.factor(ifelse(am == 0, "Auto", "Manual"))) %>%
group_by(am) %>%
summarise_all(mean)
mtcars %>% select(-rowname, -hp) %>%
mutate(am = as.factor(ifelse(am == 0, "Auto", "Manual"))) %>%
group_by(am) %>%
summarise_all(mean)
mtcars2 %>% select(-rowname, -hp) %>%
mutate(am = as.factor(ifelse(am == 0, "Auto", "Manual"))) %>%
group_by(am) %>%
summarise_all(mean)
set.seed(1)
mtcars2 %>% sample_n(5)
mtcars2 %>% sample_frac(0.25)
mtcars2 %>% mutate(am = ifelse(am == 0, "Auto", "Manual"))
ifelse((x<-85) >= 80, "Passed", "Failed")
mtcars2 %>% select(-rowname, -hp) %>%
mutate(am = as.factor(ifelse(am == 0, "Auto", "Manual"))) %>%
group_by(am) %>%
summarise_all(mean)
library(RSQLite)
install.packages(RSQLite)
install.packages(sqlite)
install.packages("RSQLite")
library(RSQLite)
conn <- dbConnect(SQLite("data/chinook.db"))
dbListTables(conn)
library(RSQLite)
conn <- dbConnect(SQLite("data/chinook.db"))
conn <- dbConnect(SQLite(chinook.db"))
dbListTables(conn)
conn <- dbConnect(SQLite("chinook.db"))
conn <- dbConnect(SQLite("data/chinook.db"))
dbListTables(conn)
conn <- dbConnect(SQLite(),"data/chinook.db")
dbListTables(conn)
conn <- dbConnect(SQLite(), "data/chinook.db")
dbListTables(conn)
dbListTables(conn, "customers")
customers <- dbGetQuery(conn, "SELECT * FROM customers LIMIT 5")
customers
customers %>% as_tibble() %>% select(2, 3, country)
customers %>% as_tibble() %>% select(2, 3, Country)
customers %>% as_tibble() %>% select(2, 3, Country)
customers %>% as_tibble() %>% select(2, 3, Country)
artist_album <- dbGetQuery(conn, "SELECT * FROM artists JOIN albums ON artists.artistid = albums.artistid")
artist_album <- dbGetQuery(conn, "SELECT artists.names FROM artists JOIN albums ON artists.artistid = albums.artistid")
artist_album <- dbGetQuery(conn,
"SELECT artists.name, albums,title
FROM artists JOIN albums
ON artists.artistid = albums.artistid")
artist_album <- dbGetQuery(conn,
"SELECT artists.name, albums,title
FROM artists JOIN albums
ON artists.artistid = albums.artistid")
artist_album <- dbGetQuery(conn,
"SELECT artists.name, albums,title
FROM artists JOIN albums
ON artists.artistid = albums.artistid")
artist_album <- dbGetQuery(conn,
"SELECT artists.name, album,title
FROM artists JOIN albums
ON artists.artistid = albums.artistid")
artist_album <- dbGetQuery(conn,
"SELECT artists.name, album,title
FROM artists JOIN album
ON artists.artistid = albums.artistid")
artist_album <- dbGetQuery(conn,
"SELECT artists.name, album,title
FROM artists JOIN album
ON artists.artistid = album.artistid")
artist_album <- dbGetQuery(conn,
"SELECT artists.name, albums,title
FROM artists JOIN albums
ON artists.artistid = albums.artistid")
artist_album <- dbGetQuery(conn,
"SELECT artists.name, albums,title
")
artist_album <- dbGetQuery(conn,
"SELECT * FROM artists")
artist_album <- dbGetQuery(conn,
"SELECT artists.name FROM artists")
artist_album <- dbGetQuery(conn,
"SELECT artists.name, albums,title FROM artists")
artist_album <- dbGetQuery(conn,
"SELECT artists.name, albums,title FROM artists JOIN albums ")
artist_album <- dbGetQuery(conn,
"SELECT artists.name, albums.title FROM artists JOIN albums ")
artist_album <- dbGetQuery(conn,
"SELECT artists.name, albums,title
FROM artists JOIN albums
ON artists.artistid = albums.artistid")
artist_album <- dbGetQuery(conn,
"SELECT artists.name, albums.title
FROM artists JOIN albums
ON artists.artistid = albums.artistid")
install.packages("RPostgreSQL")
library(RPostgreSQL)
conn2 <- dbConnect(PostgreSQL(),
user = "xgvolwcn",
password = "Fbob5tyatBES3e3BO2oC4CnhOfNSPIsV",
host = "	arjuna.db.elephantsql.com (arjuna-01)",
port = 5432,
dbname = "xgvolwcn")
conn2 <- dbConnect(PostgreSQL(),
user = "xgvolwcn",
password = "Fbob5tyatBES3e3BO2oC4CnhOfNSPIsV",
host = "	arjuna.db.elephantsql.com (arjuna-01)",
port = 5432,
dbname = "xgvolwcn")
conn2 <- dbConnect(PostgreSQL(),
user = "xgvolwcn",
password = "Fbob5tyatBES3e3BO2oC4CnhOfNSPIsV",
host = "	amazon-web-services::ap-northeast-1",
port = 5432,
dbname = "xgvolwcn")
conn2 <- dbConnect(PostgreSQL(),
user = "xgvolwcn",
password = "Fbob5tyatBES3e3BO2oC4CnhOfNSPIsV",
host = "arjuna.db.elephantsql.com",
port = 5432,
dbname = "xgvolwcn")
dbListTables(conn2)
dbWriteTable(conn2, "data", mtcars)
dbListTables(conn2)
worldphone <- read_csv("https://gist.githubusercontent.com/toyeiei/d9e267754d0b7a7045e182b3d0011636/raw/04cf2d5b211dc3df279b36d968fde11ed1c9bb67/worldphone.csv")
worldphone
worldphone %>% pivot_longer(N.Amer:Mid.Amer, names_to = "Region",
values_to = "Sales")
long_wp <- worldphone %>% pivot_longer(N.Amer:Mid.Amer, names_to = "Region",
values_to = "Sales")
long_wp %>% pivot_wider(names_from = Region, values_from = Sales)
wide_wp <- long_wp %>% pivot_wider(names_from = Region, values_from = Sales)
write_csv(worldphone, "data/worldphone.csv")
worldphone %>% pivot_longer(-Year, names_to = "Region",
values_to = "Sales")
stud <- read_excel("data/scholarships.xlsx", 1)
address <- read_excel("data/scholarships.xlsx", 2)
scholarship <- read_excel("data/scholarships.xlsx", 3)
inner_join(stud, address)
stud %>% left_join(address, by = "id") %>%
left_join(scholarship, by = "id")
stud %>% left_join(address, by = "id") %>%
inner_join(scholarship, by = "id")
stud <- stud %>%
rename(student_id = id)
stud
stud %>% left_join(address, by = "id") %>%
inner_join(scholarship, by = "id")
stud %>% left_join(address, by = c("student_id" = "id"))
stud %>% left_join(address, by = c("student_id" = "id")) %>%
inner_join(scholarship, by = "id")
stud %>% left_join(address, by = c("student_id" = "id")) %>%
inner_join(scholarship, by = c("student_id" = "id"))
tmp %>% inner_join(scholarship, by = c("student_id" = "id"))
tmp <- stud %>% left_join(address, by = c("student_id" = "id")) %>%
inner_join(scholarship, by = c("student_id" = "id"))
tmp %>% inner_join(scholarship, by = c("student_id" = "id"))
