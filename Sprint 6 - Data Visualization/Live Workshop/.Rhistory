1:10
16:25
seq(from  = 1, to = 100, by 2)
seq(from = 1, to = 100, by 5)
seq(from = 1, to = 100)
help("seq")
seq(from = 1, to = 100, by 2)
seq(from = 1, to = 100, by = 2)
c("David", "Marry", "Anna", "John", "William")
friends <- c("David", "Marry", "Anna", "John", "William")
ages <- c(30, 31, 25, 29, 32)
is_male <- c(TRUE, FALSE, FALSE, TRUE, TRUE)
x <- 1:25
x
length(x)
dim(x) <- c(5,5)
x
matrix(1:25, ncol=5)
matrix(1:6, ncol=5, nrow=2)
matrix(1:6, ncol=3, nrow=2)
matrix(1:6, ncol=3, nrow=2, byrow = T)
m2 <- matrix(1:6, ncol=3, nrow=2, byrow = T)
m2
m1 <- (1:25, ncol=5)
m1 <- matrix(1:25, ncol=5)
1:25, ncol=5
m2 <- matrix(1:6, ncol=3, nrow=2, byrow = T)
m1 <- matrix(1:25, ncol=5)
m2 <- matrix(1:6, ncol=3, nrow=2, byrow = T)
m2 + 100
m2 * 4
my_name <- "Toy"
my_name <- "Toy"
my_friends <- c("Wan", "Ink", "Zue")
m1 <- matrix(1:25, ncol=5)
R_is_cool <- TRUE
my_list <- list(item1 = my_name,
item2 = my_friends,
item3 = m1,
item4 = R_is_cool)
my_list
my_list$item3
my_list$item4
friends <- c("Wan", "Ink", "Aan", "Bee", "Top")
ages <- c(26, 27, 32, 31, 28)
locations <- c("New York", "London", "London", "Tokyo", "Manchester")
movie_lover <- c(TRUE, TRUE, FALSE, TRUE, TRUE)
data.frame(friends, ages, locations, movie_lover)
df <- data.frame(friends, ages, locations, movie_lover)
df
view(df)
View(df)
my_list <- list(friends = friends,
ages = ages,
locations = locations
movie = movie_lover)
friends <- c("Wan", "Ink", "Aan", "Bee", "Top")
ages <- c(26, 27, 32, 31, 28)
locations <- c("New York", "London", "London", "Tokyo", "Manchester")
movie_lover <- c(TRUE, TRUE, FALSE, TRUE, TRUE)
my_list <- list(friends = friends,
ages = ages,
locations = locations
movie = movie_lover)
my_list <- list(friends = friends,
ages = ages,
locations = locations,
movie = movie_lover)
my_list
data.frame(my_list)
df <- data.frame(my_list)
df
friends[2]
ages <- c(26, 27, 32, 31, 28)
ages <- c(26, 27, 32, 31, 28)
friends <- c("Wan", "Ink", "Aan", "Bee", "Top")
ages <- c(26, 27, 32, 31, 28)
locations <- c("New York", "London", "London", "Tokyo", "Manchester")
movie_lover <- c(TRUE, TRUE, FALSE, TRUE, TRUE)
df <- data.frame(friends, ages, locations, movie_lover)
View(df)
friends[1:3]
friends[4:5]
friends[c(1,3,5)]
ages[ages > 30]
ages[ages <= 30]
ages
names(ages) <- friends
ages
ages["Wan"]
ages["Wan", "Aan", "Bee"]
ages[c("Wan", "Aan", "Bee")]
View(df)
df[1,3]
df[2,4]
df[1:2, 2:4]
df[, "friends"]
df[, c("friends", "locations"]
df[, c("friends", "locations")]
df[df$movie_lover = True];
df[df$movie_lover == True, ]
df[df$movie_lover == TRUE, ]
df[df$movie_lover == FALSE, ]
df[df$ages < 30, ]
df[df$friends < 30, ]
df[df$friends == "Top", ]
my_sum <- function(num1, num2){
num1 + num2
}
my_sum(10, 15)
num1 + num2
my_sum2 <- function(num1, num2=2){
num1 + num2
}
my_sum2(10)
my_sum2(10,5)
install.packages("glue")
library(glue)
my_name <- "Toy"
my_age <- 33
glue("Hello my name is {my_name}. This year I'm {my_age} years old.")
hello <- function(user_name){
glue("Hello! {user_name}")
}
hello(Gun)
hello("Gun"")
hello("Gun")
fav_book <- "Business Made Simple"
movie_lover <- TRUE
c("cat", "dog", "dog", "cat", "cat")
puppy <- c("cat", "dog", "dog", "cat", "cat")
puppy
class(puppy)
as.factor(puppy)
class(puppy)
as.factor(puppy)
as.factor(puppy)
class(puppy)
puppy <- as.factor(puppy)
class(puppy)
table(puppy)
source("C:/Users/gunsr/Desktop/Programming/Data Science Bootcamp by DATAROCKIE/Sprint 4 - Programming Foundation/R On Demand Code/R Foundation Workshop 3 Hrs/Homework_Pao_Ying_Chub.R")
rps_play <- function(){
user_weapon <- readline("Please choose your weapon (Rock=1, Paper:2, Scissors:3): ")
}
cat("Hello Ladies & Gentlemen, welcome to Rock–Paper–Scissors Game \n")
cat("---------------------------------------------------------------------------------------------------------------")
cat("\nPlease read the rule before coming to the game!\n
On the count of three (usually accompanied by a chant of “Rock, Paper, Scissors”),
each time choosing one hand and bringing it down on the count, the opponent “throw” their selection.
Rock = 1, Scissors = 2, and Paper = 3.
If players throw out the same gesture with the opponent, the game goes on.
If not, it’s decided by a harmonic and intransitive method,
rock crushes scissors, scissors cuts paper, but paper covers rock.")
cat("\n---------------------------------------------------------------------------------------------------------------")
game_start <- toupper(readline("\nDo you want to play the RPS game? (Y/N): "))
if(game_start == "Y"){
cat("Game Start!")
rps_play()
} else {
print("Exit")
}
1
if(game_start == "Y"){
cat("Game Start!")
rps_play()
} else {
print("Exit")
}
source("C:/Users/gunsr/Desktop/Programming/Data Science Bootcamp by DATAROCKIE/Sprint 4 - Programming Foundation/R On Demand Code/R Foundation Workshop 3 Hrs/Homework_Pao_Ying_Chub2.R")
rps_run()
rps_play()
rps_play()
weapons <- dict("1"="Rock", "2"="Paper", "3"="Scissors", "4"="Run!")
rps_play <- function(){
#user_weapon <- as.numeric(readline("Please choose your weapon (Rock=1, Paper:2, Scissors:3, Run!:4): "))
user_weapon <- readline("Please choose your weapon (Rock=1, Paper:2, Scissors:3, Run!:4): ")
cat(weapons[user_weapon])
if(user_weapon %in% c("1", "2", "3", "4")){
cat(weapons[user_weapon])
} else {
rps_play()
}
}
cat("Hello Ladies & Gentlemen, welcome to Rock–Paper–Scissors Game \n")
cat("---------------------------------------------------------------------------------------------------------------")
cat("\nPlease read the rule before coming to the game!\n
On the count of three (usually accompanied by a chant of “Rock, Paper, Scissors”),
each time choosing one hand and bringing it down on the count, the opponent “throw” their selection.
Rock = 1, Scissors = 2, and Paper = 3.
If players throw out the same gesture with the opponent, the game goes on.
If not, it’s decided by a harmonic and intransitive method,
rock crushes scissors, scissors cuts paper, but paper covers rock.")
cat("\n---------------------------------------------------------------------------------------------------------------")
game_start <- toupper(readline("\nDo you want to play the RPS game? (Y/N): "))
#cat("Game Start!")
rps_play()
print("Exit")
}
rps_play()
rps_play()
rps_play()
rps_play()
rps_play()
rps_play()
rps_play <- function(){
#user_weapon <- as.numeric(readline("Please choose your weapon (Rock=1, Paper:2, Scissors:3, Run!:4): "))
user_weapon <- readline("Please choose your weapon (Rock=1, Paper:2, Scissors:3, Run!:4): ")
cat(user_weapon)
if(user_weapon %in% c("1", "2", "3", "4")){
cat(weapons[user_weapon])
} else {
rps_play()
}
}
rps_play()
rps_play <- function(){
#user_weapon <- as.numeric(readline("Please choose your weapon (Rock=1, Paper:2, Scissors:3, Run!:4): "))
user_weapon <- readline("Please choose your weapon (Rock=1, Paper:2, Scissors:3, Run!:4): ")
cat(user_weapon)
#if(user_weapon %in% c("1", "2", "3", "4")){
#  cat(weapons[user_weapon])
#} else {
#  rps_play()
#}
}
rps_play()
rps_play <- function(){
#user_weapon <- as.numeric(readline("Please choose your weapon (Rock=1, Paper:2, Scissors:3, Run!:4): "))
user_weapon <- readline("Please choose your weapon (Rock=1, Paper:2, Scissors:3, Run!:4): ")
cat(user_weapon)
print(class(user_weapon))
#if(user_weapon %in% c("1", "2", "3", "4")){
#  cat(weapons[user_weapon])
#} else {
#  rps_play()
#}
}
rps_play()
weapons[1]
weapons["1"]
weapons
weapons <- dict("1"="Rock", "2"="Paper", "3"="Scissors", "4"="Run!")
install.packages("Dict")
library(Dict)
rps_play()
weapons[1]
weapons
weapons <- dict("1"="Rock", "2"="Paper", "3"="Scissors", "4"="Run!")
weapons
weapons[1]
rps_play <- function(){
#user_weapon <- as.numeric(readline("Please choose your weapon (Rock=1, Paper:2, Scissors:3, Run!:4): "))
user_weapon <- readline("Please choose your weapon (Rock=1, Paper:2, Scissors:3, Run!:4): ")
cat(user_weapon)
print(class(user_weapon))
cat(weapons[user_weapon])
#if(user_weapon %in% c("1", "2", "3", "4")){
#  cat(weapons[user_weapon])
#} else {
#  rps_play()
#}
}
rps_play()
source("C:/Users/gunsr/Desktop/Programming/Data Science Bootcamp by DATAROCKIE/Sprint 4 - Programming Foundation/R On Demand Code/R Foundation Workshop 3 Hrs/Homework_Pao_Ying_Chub2.R")
game_start <- toupper(readline("\nDo you want to play the RPS game? (Y/N): "))
if(game_start == "Y"){
#cat("Game Start!")
rps_play()
} else {
print("Exit")
}
source("C:/Users/gunsr/Desktop/Programming/Data Science Bootcamp by DATAROCKIE/Sprint 4 - Programming Foundation/R On Demand Code/R Foundation Workshop 3 Hrs/Homework_Pao_Ying_Chub2.R")
rps_play <- function(){
#user_weapon <- as.numeric(readline("Please choose your weapon (Rock=1, Paper:2, Scissors:3, Run!:4): "))
user_weapon <- readline("Please choose your weapon (Rock=1, Paper:2, Scissors:3, Run!:4): ")
cat(weapons[user_weapon])
if(user_weapon %in% c("1", "2", "3", "4")){
#cat(weapons[user_weapon])
versus(user_weapon)
} else {
rps_play()
}
}
rps_play()
versus <- function(weapon){
cat(weapons[weapon])
}
rps_play()
setwd("C:/Users/gunsr/Desktop/Programming/Data Science Bootcamp by DATAROCKIE/Sprint 6 - Data Visualization/Live Workshop")
install.packages(c("tidyverse", "dplyr"))
library(dplyr)
library(ggplot2)
head(mtcars)
ggplot(data = mtcars, aes(mpg)) +
geom_histogram()
ggplot(data = mtcars, aes(mpg)) +
geom_histogram(bins = 10)
ggplot(data = mtcars, aes(mpg)) +
geom_density()
ggplot(data = mtcars, aes(mpg)) +
geom_boxplot()
p <- ggplot(data = mtcars, aes(mpg))
p
p + geom_histogram(bins = 10)
p + geom_histogram(bins = 10)
p + geom_density()
p + geom_boxplot()
ggplot(mtcars, aes(hp, mpg))
ggplot(mtcars, aes(hp, mpg)) +
geom_point()
ggplot(mtcars, aes(hp, mpg)) +
geom_point() +
geom_smooth()
ggplot(mtcars, aes(hp, mpg)) +
geom_point() +
geom_smooth(se = FALSE)
ggplot(mtcars, aes(hp, mpg)) +
geom_point() +
geom_smooth(se = FALSE, color = red)
ggplot(mtcars, aes(hp, mpg)) +
geom_point() +
geom_smooth(se = FALSE, color = red)
ggplot(mtcars, aes(hp, mpg)) +
geom_point() +
geom_smooth(se = FALSE, color = "r")
ggplot(mtcars, aes(hp, mpg)) +
geom_point() +
geom_smooth(se = FALSE, color = "red")
ggplot(mtcars, aes(hp, mpg)) +
geom_point() +
geom_smooth(se = FALSE, color = "red") +
ggplot(mtcars, aes(hp, mpg)) +
geom_point() +
geom_smooth(se = FALSE, color = "red") +
geom_rug()
()
ggplot(mtcars, aes(hp, mpg)) +
geom_point() +
geom_smooth(se = FALSE, color = "red") +
geom_rug()
p1 <- ggplot(mtcars, aes(hp, mpg)) +
geom_point() +
geom_smooth(se = FALSE, color = "red") +
geom_rug()
p1 + theme_minimal()
p1 +
theme_minimal() +
lab(title = "My first ggplot chart",
x = "Horse Power",
y = "Miles per Gallon")
p1 +
theme_minimal() +
labs(title = "My first ggplot chart",
x = "Horse Power",
y = "Miles per Gallon")
diamonds
diamonds$cut[1:10]
temperatures <- c("high", "med", "low", "low", "high")
factor(temperatures, levels = ("low", "med", "high"))
temperatures <- c("high", "med", "low", "low", "high")
factor(temperatures, levels = ("low","med","high"), ordered = TRUE)
temperatures <- c("high", "med", "low", "low", "high")
factor(temperatures, levels = c("low","med","high"), ordered = TRUE)
ggplot(diamonds, aes(cut)) +
geom_bar()
ggplot(diamonds, aes(cut, fill = clarity)) +
geom_bar()
ggplot(diamonds, aes(cut, fill = clarity)) +
geom_bar() +
theme_minimal()
ggplot(diamonds, aes(cut, fill = clarity)) +
geom_bar(position = "dodge") +
theme_minimal()
ggplot(diamonds, aes(cut, fill = clarity)) +
geom_bar(position = "fill") +
theme_minimal()
ggplot(diamonds, aes(cut, fill = clarity)) +
geom_bar() +
theme_minimal()
ggplot(diamonds, aes(cut, fill = clarity)) +
geom_bar() +
theme_minimal()
ggplot(diamonds, aes(cut, fill = clarity)) +
geom_bar(position = "dodge") +
theme_minimal()
ggplot(diamonds, aes(cut, fill = clarity)) +
geom_bar(position = "fill") +
theme_minimal()
ggplot(diamonds, aes(price)) +
geom_boxplot()
ggplot(diamonds, aes(cut, price)) +
geom_boxplot()
ggplot(diamonds, aes(cut, price)) +
geom_violin()
